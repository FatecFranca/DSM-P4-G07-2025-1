name: Sync Modules to Individual Repositories

on:
  push:
    branches:
      - main

jobs:
  sync-modules:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false # Opcional: define se a falha em um job da matriz deve cancelar os outros. false = continua.
      matrix:
        module:
          - name: api-java # Um nome identificador para o módulo/pasta
            repo_slug: gabrielspirlan/petdex-api # O slug do repositório de destino (usuario/nome-repo)
            source_path: api-java # O nome da pasta no repositório de origem (este repositório)
          - name: iot
            repo_slug: gabrielspirlan/petdex-iot
            source_path: iot
          - name: mobile
            repo_slug: gabrielspirlan/petdex-app
            source_path: mobile
          - name: web
            repo_slug: gabrielspirlan/petdex-web
            source_path: web
          - name: api-python
            repo_slug: gabrielspirlan/petdex-estatistica
            source_path: api-python

    steps:
    - name: Checkout source monorepo
      uses: actions/checkout@v4 # Recomenda-se usar a versão mais recente

    - name: Sync module (${{ matrix.module.name }}) to its repository
      env:
        TARGET_REPO_TOKEN: ${{ secrets.TARGET_REPO_TOKEN }} # Token com permissão de escrita nos repositórios de destino
        # Passando valores da matriz para o ambiente para simplificar o script
        MODULE_NAME: ${{ matrix.module.name }}
        DEST_REPO_SLUG: ${{ matrix.module.repo_slug }}
        SOURCE_FOLDER_NAME: ${{ matrix.module.source_path }}
      run: |
        SOURCE_DIR_FULL_PATH="$GITHUB_WORKSPACE/${SOURCE_FOLDER_NAME}" # Caminho completo para a pasta de origem do módulo

        # Verifica se o diretório de origem do módulo existe
        if [ ! -d "${SOURCE_DIR_FULL_PATH}" ]; then
          echo "Diretório de origem '${SOURCE_DIR_FULL_PATH}' para o módulo '${MODULE_NAME}' não encontrado. Pulando este módulo."
          exit 0 # Sai com sucesso para este item da matriz, permitindo que outros continuem
        fi

        # Diretório temporário para clonar o repositório de destino
        # Usar um nome de diretório único para cada módulo evita conflitos
        DEST_CLONE_DIR="../${MODULE_NAME}_clone"

        echo "Clonando o repositório de destino '${DEST_REPO_SLUG}' em '${DEST_CLONE_DIR}'..."
        # Clona apenas o branch principal (geralmente 'main') e com profundidade 1 para economizar tempo/espaço
        # O token é usado para autenticação HTTPS
        git clone --depth 1 "https://x-access-token:${TARGET_REPO_TOKEN}@github.com/${DEST_REPO_SLUG}.git" "${DEST_CLONE_DIR}"

        echo "Sincronizando arquivos de '${SOURCE_DIR_FULL_PATH}/' para '${DEST_CLONE_DIR}/' para o módulo '${MODULE_NAME}'..."
        # A barra final em SOURCE_DIR_FULL_PATH/ é crucial para o rsync copiar o *conteúdo* da pasta, não a pasta em si.
        # A barra final em DEST_CLONE_DIR/ garante que seja tratado como um diretório.
        # --delete remove arquivos no destino que não existem na origem.
        # --exclude='.git/' evita copiar qualquer metadado .git da origem (improvável em subpastas, mas seguro).
        rsync -av --delete --exclude='.git/' "${SOURCE_DIR_FULL_PATH}/" "${DEST_CLONE_DIR}/"

        # Muda para o diretório do repositório clonado
        cd "${DEST_CLONE_DIR}"

        echo "Configurando a identidade do Git para commit em '${DEST_REPO_SLUG}'..."
        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

        echo "Adicionando alterações ao stage para o módulo '${MODULE_NAME}' em '${DEST_REPO_SLUG}'..."
        git add .

        # Verifica se há alterações para commitar
        if git diff --staged --quiet; then
          echo "Nenhuma alteração para commitar para o módulo '${MODULE_NAME}' em '${DEST_REPO_SLUG}'."
        else
          echo "Commitando alterações para o módulo '${MODULE_NAME}'..."
          # Cria um SHA curto para a mensagem de commit
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          COMMIT_MESSAGE="Sync: Atualiza módulo '${MODULE_NAME}' do repositório ${{ github.repository }}@${SHORT_SHA}"
          git commit -m "${COMMIT_MESSAGE}"
          
          echo "Enviando alterações para o branch 'main' de '${DEST_REPO_SLUG}'..."
          # Assume que o branch de destino é 'main'. Adapte se necessário.
          git push origin main
        fi
